<UserControl x:Class="PowerShellTools.Explorer.PSParameterEditor"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:PowerShellTools.Explorer"
        xmlns:scm="clr-namespace:System.ComponentModel;assembly=WindowsBase">
    <UserControl.Resources>
        <ResourceDictionary>
            
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="../Themes/Generic.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter" />
            <local:ModuleNameConverter x:Key="ModuleNameConverter" />
            <local:ByteValueConverter x:Key="ByteValueConverter" />
            <local:IntValueConverter x:Key="IntValueConverter"/>
            <local:LongValueConverter x:Key="LongValueConverter" />

            <!-- Fixes an issue when a datagrid is placed within a scrollviewer that the datagrid
                 doesn't pass scrollevents to the scrollviewer preventing scrolling -->
            <Style TargetType="{x:Type ScrollViewer}">
                <Style.Setters>
                    <Setter Property="local:ScrollViewerBehavior.PassTruScrolling" Value="True" />
                </Style.Setters>
            </Style>
            
            <Style x:Key="ScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                            <Border Margin="0 5 0 5"  BorderThickness="0 0 0 1" BorderBrush="{DynamicResource {x:Static local:ThemeResources.DropDownBorder}}">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <ScrollContentPresenter Grid.Column="0"
                                                            CanContentScroll="{TemplateBinding CanContentScroll}"
                                                            x:Name="ScrollContentPresenter"
                                                            Cursor="{TemplateBinding Cursor}" />
                                    <ScrollBar x:Name="PART_VerticalScrollBar" 
                                               Width="18"
                                               IsTabStop="False"
                                               Visibility="Visible"
                                               Grid.Column="1" 
                                               Orientation="Vertical"
                                               Minimum="0" 
                                               Maximum="{TemplateBinding ScrollableHeight}" 
                                               ViewportSize="{TemplateBinding ViewportHeight}" 
                                               Value="{TemplateBinding VerticalOffset}" 
                                               Cursor="Arrow" 
                                               Margin="0,-1,-1,-1"/>
                                </Grid>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            
            <ControlTemplate x:Key="ErrorTemplate">
                <Grid>
                    <Border BorderThickness="1" BorderBrush="{DynamicResource {x:Static local:ThemeResources.RequiredHighlight}}">
                        <AdornedElementPlaceholder x:Name="adorner" Margin="-1" />
                    </Border>
                </Grid>
            </ControlTemplate>
            
            <Style x:Key="DialogDataGridStyle" TargetType="{x:Type DataGrid}">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static local:ThemeResources.WindowForeground}}" />
                <Setter Property="VerticalGridLinesBrush" Value="Transparent" />
                <Setter Property="HorizontalGridLinesBrush" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="RowBackground" Value="Transparent" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
                <Setter Property="RowValidationErrorTemplate" Value="{x:Null}" />
            </Style>

            <Style x:Key="DataGridCellNoEditingStyle" TargetType="{x:Type DataGridCell}" >
                <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static local:ThemeResources.WindowForeground}}" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Height" Value="25"/>
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Padding" Value="2" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Style.Resources>
                    <Style TargetType="{x:Type ContentPresenter}">
                        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
                    </Style>
                </Style.Resources>
            </Style>

            <Style x:Key="DataGridCellEditingStyle" TargetType="{x:Type DataGridCell}" >
                <!-- Without this, editable cells have two tabstops 
                (one for the cell, one for the editing control) -->
                <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Height" Value="25"/>
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Padding" Value="2" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Style.Resources>
                    <Style TargetType="{x:Type ContentPresenter}">
                        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
                    </Style>
                </Style.Resources>
                <!-- Due to WPF bug(981654), when we tab out of data grid and tab back in, 
                the selected cell is not the same as cell in focus.
                So we need to clean up the borders for the selected cell by setting the border thickness to 0. 
                This will remove highlighting on the cell not in focus -->
                <Style.Triggers>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsSelected" Value="True"/>
                            <Condition Property="IsKeyboardFocusWithin" Value="False"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="BorderThickness" Value="0"></Setter>
                    </MultiTrigger>
                </Style.Triggers>
            </Style>
            
            <Style x:Key="InLineTextBoxStyle" TargetType="{x:Type TextBox}">
                <Setter Property="Background" Value="{DynamicResource {x:Static local:ThemeResources.DropDownBackground}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static local:ThemeResources.WindowForeground}}" />
                <Setter Property="CaretBrush" Value="{DynamicResource {x:Static local:ThemeResources.WindowForeground}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static local:ThemeResources.DropDownBorder}}" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Margin" Value="2" />
                <Setter Property="Padding" Value="2" />
                <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ErrorTemplate}" />
            </Style>

            <Style x:Key="InLineComboBoxStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource ComboBox}">
                <Setter Property="Background" Value="{DynamicResource {x:Static local:ThemeResources.DropDownBackground}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static local:ThemeResources.WindowForeground}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static local:ThemeResources.DropDownBorder}}" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Margin" Value="2" />
                <Setter Property="Padding" Value="2" />
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ErrorTemplate}" />
            </Style>

            <Style x:Key="InLineCheckBoxStyle" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource CheckBox}">
                <Setter Property="Background" Value="{DynamicResource {x:Static local:ThemeResources.DropDownBackground}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static local:ThemeResources.WindowForeground}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static local:ThemeResources.DropDownBorder}}" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Margin" Value="2" />
                <Setter Property="Padding" Value="2" />
                <Setter Property="HorizontalAlignment" Value="Left" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ErrorTemplate}" />
            </Style>
            
            <Style x:Key="CommandPreview" TargetType="{x:Type TextBox}">
                <Setter Property="Background" Value="{DynamicResource {x:Static local:ThemeResources.DropDownBackground}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static local:ThemeResources.WindowForeground}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static local:ThemeResources.DropDownBorder}}" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Margin" Value="10" />
                <Setter Property="Padding" Value="2" />
                <Setter Property="IsReadOnly" Value="True" />
                <Setter Property="TextWrapping" Value="WrapWithOverflow" />
            </Style>
            
            <!-- DataTemplates for the individual editing controls based on parameter type -->
            <DataTemplate x:Key="UnsupportedParameterTemplate">
                <TextBlock Text="Unsupported" HorizontalAlignment="Left" Foreground="DarkGray" Margin="2" Padding="2" />
            </DataTemplate>
            <DataTemplate x:Key="StringParameterValueTemplate">
                <TextBox Style="{StaticResource InLineTextBoxStyle}" 
                         Text="{Binding Path=Value, UpdateSourceTrigger=PropertyChanged}" 
                         ToolTip="{Binding Path=HelpMessage, Mode=OneWay}" />
            </DataTemplate>
            <DataTemplate x:Key="ByteParameterValueTemplate">
                <TextBox Style="{StaticResource InLineTextBoxStyle}" 
                         Text="{Binding Path=Value, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource ResourceKey=ByteValueConverter}}"
                         ToolTip="{Binding Path=HelpMessage, Mode=OneWay}" />
            </DataTemplate>
            <DataTemplate x:Key="IntParameterValueTemplate">
                <TextBox Style="{StaticResource InLineTextBoxStyle}" 
                         Text="{Binding Path=Value, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource ResourceKey=IntValueConverter}}"
                         ToolTip="{Binding Path=HelpMessage, Mode=OneWay}" />
            </DataTemplate>
            <DataTemplate x:Key="LongParameterValueTemplate">
                <TextBox Style="{StaticResource InLineTextBoxStyle}" 
                         Text="{Binding Path=Value, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource ResourceKey=LongValueConverter}}"
                         ToolTip="{Binding Path=HelpMessage, Mode=OneWay}" />
            </DataTemplate>
            <DataTemplate x:Key="SwitchParameterValueTemplate">
                <CheckBox Style="{StaticResource InLineCheckBoxStyle}" 
                          IsChecked="{Binding Path=Value, UpdateSourceTrigger=PropertyChanged}"
                          ToolTip="{Binding Path=HelpMessage, Mode=OneWay}" />
            </DataTemplate>
            <DataTemplate x:Key="ChoiceParameterValueTemplate">
                <ComboBox Style="{StaticResource InLineComboBoxStyle}"
                          SelectedValue="{Binding Path=Value, UpdateSourceTrigger=PropertyChanged}"
                          ItemsSource="{Binding Path=Choices}" 
                          Validation.ErrorTemplate="{StaticResource ErrorTemplate}"
                          ToolTip="{Binding Path=HelpMessage, Mode=OneWay}" />
            </DataTemplate>
            
            <CollectionViewSource x:Key="ParametersViewSource" Source="{Binding Path=Model.Parameters}">
                <CollectionViewSource.SortDescriptions>
                    <scm:SortDescription PropertyName="Name" />
                </CollectionViewSource.SortDescriptions>
            </CollectionViewSource>

            <CollectionViewSource x:Key="CommonParametersViewSource" Source="{Binding Path=Model.CommonParameters}">
                <CollectionViewSource.SortDescriptions>
                    <scm:SortDescription PropertyName="Name" />
                </CollectionViewSource.SortDescriptions>
            </CollectionViewSource>
            
        </ResourceDictionary>
    </UserControl.Resources>
    
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" /> <!-- ProgressBar -->
            <RowDefinition Height="Auto" /> <!-- Parameterset selection -->
            <RowDefinition Height="*" /> <!-- Parameters/Options -->
            <RowDefinition Height="Auto" /> <!-- Preview label -->
            <RowDefinition Height="Auto" /> <!-- Preview -->
            <RowDefinition Height="Auto" /> <!-- Buttons -->
        </Grid.RowDefinitions>

        <!-- Busy indicator -->
        <ProgressBar Grid.Row="0" 
                     Height="2"
                     Margin="0" 
                     IsIndeterminate="{Binding IsBusy}" 
                     Visibility="{Binding RelativeSource={RelativeSource Self}, 
                                          Path=IsIndeterminate, 
                                          Converter={StaticResource BoolToVisibilityConverter}}" />

        <ComboBox Grid.Row="1" 
                  Style="{StaticResource ComboBox}"
                  VerticalAlignment="Stretch" 
                  HorizontalAlignment="Stretch" 
                  Margin="0" 
                  ItemsSource="{Binding Path=Model.ParameterSets, Mode=OneWay}"
                  SelectedIndex="{Binding Path=SelectedIndex}"
                  SelectedItem="{Binding Path=SelectedItem}" 
                  IsEnabled="{Binding Path=Model.HasParameterSets, Mode=OneWay}" />
        <ScrollViewer Grid.Row="2" Style="{StaticResource ScrollViewerStyle}">
            <StackPanel>
                <Expander Style="{StaticResource StatusGroupExpander}" IsExpanded="True">
                    <Expander.Header>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Parameters" FontWeight="SemiBold" />
                        </StackPanel>
                    </Expander.Header>
                    <DataGrid Margin="15 5 5 5"
                              Height="Auto"
                              BorderThickness="0" 
                              Background="Transparent"
                              AutoGenerateColumns="False"
                              HeadersVisibility="None"
                              SelectionUnit="Cell"
                              SelectionMode="Single"
                              Validation.ErrorTemplate="{x:Null}"
                              RowValidationErrorTemplate="{x:Null}"
                              Style="{StaticResource DialogDataGridStyle}"
                              DataContext="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=DataContext}"
                              ItemsSource="{Binding Source={StaticResource ParametersViewSource}}">
                        <DataGrid.Resources>
                            <local:BindingProxy x:Key="proxy" Data="{Binding}" />
                        </DataGrid.Resources>
                        <DataGrid.Columns>
                            <DataGridTemplateColumn CellStyle="{StaticResource DataGridCellNoEditingStyle}" 
                                        IsReadOnly="True"
                                        Width="Auto"
                                        MinWidth="100" 
                                        Validation.ErrorTemplate="{x:Null}">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <Grid>
                                            <TextBlock VerticalAlignment="Center">
                                    <Run Text="{Binding Path=Name, Mode=OneWay}" />
                                    <Run Text=":" />
                                            </TextBlock>
                                        </Grid>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn IsReadOnly="False"                                      
                                        MinWidth="100"
                                        Width="*"
                                        Validation.ErrorTemplate="{x:Null}"
                                        CellStyle="{StaticResource DataGridCellEditingStyle}">
                                <DataGridTemplateColumn.CellTemplateSelector>
                                    <local:ParameterEditorTemplateSelector
                                        UnsupportedTemplete="{StaticResource UnsupportedParameterTemplate}"
                                        StringTemplate="{StaticResource StringParameterValueTemplate}"
                                        ByteTemplate="{StaticResource ByteParameterValueTemplate}"
                                        IntTemplate="{StaticResource IntParameterValueTemplate}"
                                        LongTemplate="{StaticResource LongParameterValueTemplate}"
                                        SwitchTemplate="{StaticResource SwitchParameterValueTemplate}"
                                        ChoiceTemplate="{StaticResource ChoiceParameterValueTemplate}" />
                                </DataGridTemplateColumn.CellTemplateSelector>
                            </DataGridTemplateColumn>
                        </DataGrid.Columns>
                    </DataGrid>
                </Expander>

                <Expander Style="{StaticResource StatusGroupExpander}" 
                          IsExpanded="False" 
                          Visibility="{Binding Path=Info.SupportsCommonParameters, Converter={StaticResource BoolToVisibilityConverter}}">
                    <Expander.Header>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Common Parameters" FontWeight="SemiBold" />
                        </StackPanel>
                    </Expander.Header>
                    <DataGrid Margin="15 5 5 5" 
                              BorderThickness="0" 
                              Background="Transparent"
                              AutoGenerateColumns="False"
                              HeadersVisibility="None"
                              SelectionUnit="Cell"
                              SelectionMode="Single"
                              Validation.ErrorTemplate="{x:Null}"
                              RowValidationErrorTemplate="{x:Null}"
                              Style="{StaticResource DialogDataGridStyle}"
                              DataContext="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=DataContext}"
                              ItemsSource="{Binding Source={StaticResource CommonParametersViewSource}}">
                        <DataGrid.Resources>
                            <local:BindingProxy x:Key="proxy" Data="{Binding}" />
                        </DataGrid.Resources>
                        <DataGrid.Columns>
                            <DataGridTemplateColumn CellStyle="{StaticResource DataGridCellNoEditingStyle}" 
                                        IsReadOnly="True"
                                        Width="Auto"
                                        MinWidth="100" 
                                        Validation.ErrorTemplate="{x:Null}">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <Grid>
                                            <TextBlock VerticalAlignment="Center">
                                    <Run Text="{Binding Path=Name, Mode=OneWay}" />
                                    <Run Text=":" />
                                            </TextBlock>
                                        </Grid>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn IsReadOnly="False"                                      
                                        MinWidth="100"
                                        Width="*"
                                        Validation.ErrorTemplate="{x:Null}"
                                        CellStyle="{StaticResource DataGridCellEditingStyle}">
                                <DataGridTemplateColumn.CellTemplateSelector>
                                    <local:ParameterEditorTemplateSelector
                                        UnsupportedTemplete="{StaticResource UnsupportedParameterTemplate}"
                                        StringTemplate="{StaticResource StringParameterValueTemplate}"
                                        ByteTemplate="{StaticResource ByteParameterValueTemplate}"
                                        IntTemplate="{StaticResource IntParameterValueTemplate}"
                                        LongTemplate="{StaticResource LongParameterValueTemplate}"
                                        SwitchTemplate="{StaticResource SwitchParameterValueTemplate}"
                                        ChoiceTemplate="{StaticResource ChoiceParameterValueTemplate}" />
                                </DataGridTemplateColumn.CellTemplateSelector>
                            </DataGridTemplateColumn>
                        </DataGrid.Columns>
                    </DataGrid>
                </Expander>

                <Expander Style="{StaticResource StatusGroupExpander}" IsExpanded="True">
                    <Expander.Header>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Options" FontWeight="SemiBold" />
                        </StackPanel>
                    </Expander.Header>
                    <local:OptionsPanel DataContext="{Binding Path=Options, Mode=OneWay}" />
                </Expander>
            </StackPanel>
        </ScrollViewer>
        

        <Label Grid.Row="3" Content="Format Preview (Drag to insert)" Margin="10 10 10 5" />
        
        <local:CommandPreview Grid.Row="4" 
                              Margin="10 0 10 0"
                              Height="80"
                              Text="{Binding Path=CommandPreview, Mode=OneWay}" />

        <!-- Dialog buttons -->
        <StackPanel x:Name="ButtonsPanel"
                   Grid.Row="5"
                   Margin="10">
            <ScrollViewer VerticalScrollBarVisibility="Hidden" HorizontalScrollBarVisibility="Auto">
                <StackPanel Margin="0 0 0 5"
                    Orientation="Horizontal" 
                    HorizontalAlignment="Right">
                    <Button x:Name="DetailsButton"
                        Content="Details..."
                        Command="{Binding ViewDetailsCommand}" Margin="0 0 5 0" />
                    <Button x:Name="CopyButton"
                        Content="Copy"
                        Command="{Binding CopyCommand}" Margin="0 0 5 0" />
                    <Button x:Name="CancelButton"
                        IsDefault="True"
                        Content="Back"
                        Command="{Binding CancelCommand}" Margin="0 0 0 0" />
                </StackPanel>
            </ScrollViewer>
        </StackPanel>

    </Grid>
</UserControl>
