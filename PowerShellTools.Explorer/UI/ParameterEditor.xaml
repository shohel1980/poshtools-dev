<Window x:Class="PowerShellTools.Explorer.ParameterEditor"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:PowerShellTools.Explorer"
        xmlns:scm="clr-namespace:System.ComponentModel;assembly=WindowsBase"
        Title="{Binding Title}" 
        Height="500"
        MinHeight="500"
        Width="600"
        MinWidth="350"
        ShowInTaskbar="True"
        WindowStartupLocation="CenterOwner" ResizeMode="CanResizeWithGrip">
    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter" />
        <local:ModuleNameConverter x:Key="ModuleNameConverter" />
        <local:ByteValueConverter x:Key="ByteValueConverter" />
        <local:IntValueConverter x:Key="IntValueConverter"/>
        <local:LongValueConverter x:Key="LongValueConverter" />

        <Style x:Key="DialogDataGridStyle" TargetType="{x:Type DataGrid}">
            <Setter Property="VerticalGridLinesBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
            <Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
            <Setter Property="BorderThickness" Value="1" />
        </Style>

        <Style x:Key="DataGridCellEditingStyle" TargetType="{x:Type DataGridCell}" >
            <!-- Without this, editable cells have two tabstops (one for the cell, one for the editing control) -->
            <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />

            <Setter Property="MinHeight" Value="16"/>

            <!-- Due to WPF bug(981654), when we tab out of data grid and tab back in, the selected cell is not the same as cell in focus.
                     So we need to clean up the borders for the selected cell by setting the border thickness to 0. This will remove highlighting on the cell not in focus-->
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="True"/>
                        <Condition Property="IsKeyboardFocusWithin" Value="False"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="BorderThickness" Value="0"></Setter>
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <!-- DataTemplates for the individual editing controls based on parameter type -->
        <DataTemplate x:Key="UnsupportedParameterTemplate">
            <TextBlock Text="Unsupported" HorizontalAlignment="Center" Foreground="DarkGray" />
        </DataTemplate>
        <DataTemplate x:Key="StringParameterValueTemplate">
            <TextBox 
                    BorderThickness="0"
                    Text="{Binding Path=Value, UpdateSourceTrigger=PropertyChanged}" />
        </DataTemplate>
        <DataTemplate x:Key="ByteParameterValueTemplate">
            <TextBox 
                    BorderThickness="0" 
                    Text="{Binding Path=Value, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource ResourceKey=ByteValueConverter}}" />
        </DataTemplate>
        <DataTemplate x:Key="IntParameterValueTemplate">
            <TextBox 
                    BorderThickness="0" 
                    Text="{Binding Path=Value, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource ResourceKey=IntValueConverter}}" />
        </DataTemplate>
        <DataTemplate x:Key="LongParameterValueTemplate">
            <TextBox 
                    BorderThickness="0" 
                    Text="{Binding Path=Value, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource ResourceKey=LongValueConverter}}" />
        </DataTemplate>
        <DataTemplate x:Key="SwitchParameterValueTemplate">
            <CheckBox 
                    BorderThickness="1"
                    Padding="2,0,2,0"
                    IsChecked="{Binding Path=Value, UpdateSourceTrigger=PropertyChanged}"
                    HorizontalAlignment="Center"
                    />
        </DataTemplate>
        
        <CollectionViewSource x:Key="ViewSource" Source="{Binding Path=Model.Parameters}">
            <CollectionViewSource.SortDescriptions>
                <scm:SortDescription PropertyName="Name" />
            </CollectionViewSource.SortDescriptions>
        </CollectionViewSource>
    </Window.Resources>
    <Grid Margin="12">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="2" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!-- Command information -->
        <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="10 10 10 20">
            <TextBlock Text="{Binding Info.Type, Mode=OneWay}" />
            <TextBlock Text=":" />
            <TextBlock Text="{Binding Info.Name, Mode=OneWay}" FontWeight="Bold" Margin="5 0 5 0" />
            <TextBlock Text="(" />
            <TextBlock Text="{Binding Info.ModuleName, Mode=OneWay, Converter={StaticResource ModuleNameConverter}}" />
            <TextBlock Text=")" />
        </StackPanel>

        <!--<TextBlock Grid.Row="1" Text="{Binding Path=Info.Synopsis, Mode=OneWay}" Margin="10 0 10 10" />-->

        <TabControl Grid.Row="3" 
                    VerticalAlignment="Stretch" 
                    HorizontalAlignment="Stretch" 
                    Margin="10 0 10 0" 
                    ItemsSource="{Binding Path=Model.ParameterSets, Mode=OneWay}"
                    SelectedIndex="{Binding Path=SelectedIndex}"
                    SelectedItem="{Binding Path=SelectedItem}">
            <TabControl.ContentTemplate>
                <ItemContainerTemplate>
                    <DataGrid BorderThickness="0" 
                              Background="Transparent"
                              AutoGenerateColumns="False"
                              HeadersVisibility="Column"
                              SelectionUnit="Cell"
                              SelectionMode="Single"
                              Style="{StaticResource DialogDataGridStyle}"
                              DataContext="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=DataContext}"
                              ItemsSource="{Binding Source={StaticResource ViewSource}}">
                        <DataGrid.Resources>
                            <local:BindingProxy x:Key="proxy" Data="{Binding}" />
                        </DataGrid.Resources>
                        <DataGrid.Columns>
                            <DataGridTextColumn IsReadOnly="True" 
                                                Binding="{Binding Path=Name, Mode=OneWay}" 
                                                Header="Parameter"
                                                MinWidth="150" />
                            <DataGridTemplateColumn IsReadOnly="False"
                                                    MinWidth="150"
                                                    Header="Value"
                                                    CellStyle="{StaticResource DataGridCellEditingStyle}">
                                <DataGridTemplateColumn.CellTemplateSelector>
                                    <local:ParameterEditorTemplateSelector
                                        UnsupportedTemplete="{StaticResource UnsupportedParameterTemplate}"
                                        StringTemplate="{StaticResource StringParameterValueTemplate}"
                                        ByteTemplate="{StaticResource ByteParameterValueTemplate}"
                                        IntTemplate="{StaticResource IntParameterValueTemplate}"
                                        LongTemplate="{StaticResource LongParameterValueTemplate}"
                                        SwitchTemplate="{StaticResource SwitchParameterValueTemplate}"/>
                                    </DataGridTemplateColumn.CellTemplateSelector>
                            </DataGridTemplateColumn>
                            <DataGridTextColumn IsReadOnly="True" 
                                                Binding="{Binding Path=HelpMessage, Mode=OneWay}" 
                                                Header="Description"
                                                Width="*"
                                                MinWidth="150" />
                        </DataGrid.Columns>
                    </DataGrid>
                </ItemContainerTemplate>
            </TabControl.ContentTemplate>
        </TabControl>
        
        <!-- Busy indicator -->
        <ProgressBar Grid.Row="4" 
                     Height="2" 
                     Margin="10 0 10 0" 
                     IsIndeterminate="{Binding IsBusy}" 
                     Visibility="{Binding RelativeSource={RelativeSource Self}, 
                                          Path=IsIndeterminate, 
                                          Converter={StaticResource BoolToVisibilityConverter}}" />

        <TextBox Grid.Row="5" 
                 Height="100"
                 Margin="10 20 10 0" 
                 IsReadOnly="True" 
                 Text="{Binding Path=CommandPreview, Mode=OneWay}" TextWrapping="WrapWithOverflow" />
        
        <!-- Dialog buttons -->
        <StackPanel x:Name="ButtonsPanel"
                   Grid.Row="6"
                   Margin="10">
            <StackPanel 
                    Orientation="Horizontal" 
                    HorizontalAlignment="Right">
                <Button x:Name="DetailsButton" 
                        Width="80"
                        Height="30"
                        IsDefault="True"
                        Content="Details..."
                        Command="{Binding ShowDetailsCommand}" Margin="0 0 5 0" />
                <!--<Button x:Name="CopyButton" 
                        Width="80"
                        Height="30"
                        IsDefault="True"
                        Content="Copy"
                        Command="{Binding Close}" Margin="0 0 5 0" />-->
                <Button x:Name="CloseButton" 
                        Width="80"
                        Height="30"
                        IsDefault="True"
                        Content="Close"
                        Command="{Binding Close}" Margin="0 0 0 0" />
            </StackPanel>
        </StackPanel>

    </Grid>
</Window>
